package main

import (
	"bytes"
	"encoding/json"
	"errors"
	"go/format"
	"io"
	"log"
	"net/http"
	"os"
	"path"
	"strings"

	"github.com/apprehensions/rbxbin"
	cs "github.com/apprehensions/rbxweb/clientsettings"
	"github.com/folbricht/pefile"
)

func main() {
	bins := []cs.BinaryType{cs.WindowsPlayer, cs.WindowsStudio}

	buf := bytes.NewBuffer([]byte(`package rbxbin

// This file is generated by dirgen. DO NOT EDIT.

import (
	"github.com/apprehensions/rbxweb/clientsettings"
)

// BinaryDirectories retrieves the PackageDirectories for the given binary.
func BinaryDirectories(bt clientsettings.BinaryType) PackageDirectories {
       switch bt {
       case clientsettings.WindowsPlayer:
               return PlayerDirectories
       case clientsettings.WindowsStudio64:
               return StudioDirectories
       default:
               panic("unhandled binary type " + string(bt) + "for dirs")
       }
}
`))

	for _, b := range bins {
		pd, err := fetchPackageDirectories(b)
		if err != nil {
			log.Fatal(err)
		}
		buf.WriteString("var " + b.Short() + "Directories = PackageDirectories{\n")
		buf.WriteString("\t// Ordered based on how they appear in JSON binary form\n")

		for p, d := range pd {
			buf.WriteString("\t\"" + p + "\": \"" + d + "\",\n")
		}

		buf.WriteString("}\n\n")
	}

	c, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	if err := os.WriteFile("dirs.go", c, 0o644); err != nil {
		log.Fatal(err)
	}
}

func fetchPackageDirectories(bt cs.BinaryType) (rbxbin.PackageDirectories, error) {
	resp, err := http.Get("https://setup.rbxcdn.com/Roblox" + bt.Short() + "Installer.exe")
	if err != nil {
		return nil, err
	}

	exe, err := io.ReadAll(resp.Body)
	if err != nil {
		resp.Body.Close()
		return nil, err
	}
	resp.Body.Close()

	pe, err := pefile.New(bytes.NewReader(exe))
	if err != nil {
		return nil, err
	}

	rdata := pe.Section(".rdata")
	b, err := rdata.Data()
	if err != nil {
		return nil, err
	}

	return findPackageDirectories(b)
}

// findPackageDirectories searches b for any JSON clauses and assumes it is
// of map[string]string, aka [rbxbin.PackageDirectories].
func findPackageDirectories(b []byte) (rbxbin.PackageDirectories, error) {
	var pd rbxbin.PackageDirectories
	start := -1
	end := -1

	for i := 0; i < len(b); i++ {
		if b[i] == '{' && b[i+1] == '"' {
			start = i
		}

		if b[i] == '}' && start != -1 && start < i+1 {
			end = i + 1

			if !bytes.Contains(b[start:end], []byte{':'}) ||
				json.Unmarshal(b[start:end], &pd) != nil {
				pd = nil
				end = -1
				start = end
				continue
			}

			break
		}
	}

	if pd == nil {
		return nil, errors.New("failed to find package directory map in bytes")
	}

	for p, d := range pd {
		pd[p] = path.Clean(strings.ReplaceAll(d, `\`, "/"))
	}

	return pd, nil
}
